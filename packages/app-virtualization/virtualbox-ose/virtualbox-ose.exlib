# Copyright 2009-2020 Pierre Lejeune <superheron@gmail.com>
# Distributed under the terms of the GNU General Public License v2

require freedesktop-desktop udev-rules
require python [ blacklist='none' multibuild=false with_opt=true ]
require option-renames [ renames=[ 'devmapper device-mapper' ] ] systemd-service

export_exlib_phases pkg_pretend src_unpack src_prepare src_configure src_compile src_test src_install pkg_postinst

SUMMARY="A family of powerful x86 virtualization products"
DESCRIPTION="
VirtualBox is a powerful x86 virtualization product for enterprise as well as
home use. Not only is VirtualBox an extremely feature rich, high performance
product for enterprise customers, it is also the only professional solution
that is freely available as Open Source Software under the terms of the GNU
General Public License (GPL).
"

HOMEPAGE="https://www.virtualbox.org"
MY_PNV="VirtualBox-${PV}"
REAL_PV="${PV%[a-z]}"
EXT_PN="Oracle_VM_VirtualBox_Extension_Pack"
VBOX_DOWNLOADS_ROOT="https://download.virtualbox.org/${PN%-ose}/${REAL_PV}"
DOWNLOADS="
    ${VBOX_DOWNLOADS_ROOT}/${MY_PNV}.tar.bz2
    additions? ( ${VBOX_DOWNLOADS_ROOT}/VBoxGuestAdditions_${REAL_PV}.iso )
    extensions? ( ${VBOX_DOWNLOADS_ROOT}/${EXT_PN}-${REAL_PV}.vbox-extpack -> ${EXT_PN}-${REAL_PV}.tar.gz )
"

LICENCES="CDDL-1.0 GPL-2 additions? ( PUEL ) extensions? ( PUEL )"
SLOT="0"
MYOPTIONS="X alsa dbus opengl pulseaudio qt5 truetype
    additions [[ description = [ Installs Guest Additions ISO ] ]]
    device-mapper [[ description = [ Installs VBoxVolInfo, dependent of libdevmapper ] ]]
    extensions [[ description = [ Install Extension Pack (binary) ] ]]
    system-kbuild [[ description = [ Use system kBuild instead of bundled copy ] ]]
    vnc [[ description = [ Builds VNC server ] ]]
    vpx [[ description = [ Use libvpx for video capture ] ]]
    webservice [[ description = [ Builds VBoxWebSrv ] ]]
    wine [[ description = [ Builds wine support ] ]]

    ( opengl truetype ) [[ requires = X ]]
    ( providers: libressl openssl ) [[ number-selected = exactly-one ]]
"

DEPENDENCIES="
    build:
        virtual/pkg-config
        system-kbuild? ( dev-util/kBuild[>=0.1.999] )
    build+run:
        !app-virtualization/virtualbox-bin
        app-arch/makeself
        dev-lang/yasm[>=0.5.1]
        dev-libs/libIDL:2
        dev-libs/libxml2:2.0[>=2.6.26]
        dev-libs/libxslt[>=1.1.17]
        group/usb
        group/vboxusers
        media-libs/libpng:=[>=1.2.5]
        media-libs/opus
        net-misc/curl[>=7.19.1]
        sys-libs/libcap
        sys-libs/pam[>=1.0.0]
        sys-libs/zlib[>=1.2.1]
        sys-power/iasl
        X? (
            media-libs/SDL:0[>=1.2.7][X]
            x11-libs/libX11
            x11-libs/libXcursor
            x11-libs/libXext
            x11-libs/libXinerama
            x11-libs/libXmu
            x11-libs/libXrandr
            opengl? (
                x11-dri/glu
                x11-dri/mesa
                x11-libs/libXmu
            )
            qt5? (
                x11-libs/qtbase:5[>=5.6][gui]
                x11-libs/qttools:5[>=5.6][gui]
                x11-libs/qtx11extras:5[>=5.6]
            )
            truetype? ( media-libs/SDL_ttf:0[>=2.0.6] )
        )
        alsa? ( sys-sound/alsa-lib[>=1.0.14] )
        dbus? ( sys-apps/dbus )
        device-mapper? ( sys-fs/lvm2 )
        providers:libressl? ( dev-libs/libressl:= )
        providers:openssl? ( dev-libs/openssl )
        pulseaudio? ( media-sound/pulseaudio[>=0.9.0] )
        vnc? ( net-libs/libvncserver[>=0.9.7] )
        vpx? ( media-libs/libvpx:=[>=0.9.5] )
        webservice? ( net-libs/gsoap[>=2.7.9f] )
        wine? ( app-emulation/wine )
"

UPSTREAM_CHANGELOG="${HOMEPAGE}/wiki/Changelog"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}/manual/UserManual.html"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/wiki/News"

WORK="${WORKBASE}/VirtualBox-${REAL_PV}"

has_32bit_glibc() {
    case "$(exhost --target)" in
        x86_64-pc-linux-gnu)
            [ -e /usr/i686-pc-linux-gnu/include/gnu/stubs.h ] && return 0 || return 1
            ;;
        i686-pc-linux-gnu)
            return 0
            ;;
    esac
}

virtualbox-ose_pkg_pretend() {
    if ! has_32bit_glibc; then
        ewarn 'You do not have a 32-bits glibc.'
        ewarn 'You will *only* be able to run 64-bits guests.'
        ewarn 'Please install 32-bits cross-toolchain if you also want to run 32-bits guests.'
    fi
}

virtualbox-ose_src_unpack() {
    unpack ${MY_PNV}.tar.bz2
    if optionq extensions; then
        edo mkdir "${WORK}"/${EXT_PN}
        edo pushd "${WORK}"/${EXT_PN}
        unpack ${EXT_PN}-${REAL_PV}.tar.gz
        edo popd
    fi
}

virtualbox-ose_src_prepare() {
    default

    # remove bundled kBuild and use the system one instead as requested
    optionq system-kbuild && edo rm -r kBuild

    edo sed -e "s/pkg-config/${PKG_CONFIG}/" \
            -e "s/\$CC -m32/\$CC32/" \
            -e "s/CC32=\"\"/CC32=\"i686-pc-linux-gnu-gcc\"/" \
            -e "s/CXX32=\"\"/CXX32=\"i686-pc-linux-gnu-g++\"/" \
            -e "s/CXX_FLAGS=\"\"/CXX_FLAGS=\"-std=c++11\"/" \
            -i configure

    edo sed -e "s/\$(QUIET)ld/\$(QUIET)\$(TOOL_\$(VBOX_GCC32_TOOL)_LD_SYSMOD)/" \
            -i src/VBox/Devices/PC/ipxe/Makefile.kmk

    edo sed -e "s/\tobjcopy/\t\$(TOOL_\$(VBOX_GCC_TOOL)_OBJCOPY)/" \
            -i src/VBox/Additions/x11/vboxmouse/Makefile.kmk \
            -i src/VBox/Additions/x11/vboxvideo/Makefile.kmk

    edo sed -e "s/readelf/$(exhost --target)-readelf/" \
            -i Config.kmk \
            -i src/VBox/Additions/common/VBoxGuest/linux/Makefile \
            -i src/VBox/HostDrivers/Support/linux/Makefile \
            -i src/VBox/Runtime/Makefile.kmk

    edo sed -e "s/\$(QUIET)nm/\$(QUIET)$(exhost --target)-nm/" \
            -i src/VBox/Runtime/Makefile.kmk

    # Do not multibuild python
    edo sed -e "/VBOX_WITH_MULTIVERSION_PYTHON ?= 1/d" \
            -i Config.kmk

    # Disable -Werror for gcc-4.5 builds
    # See http://www.virtualbox.org/ticket/6715
    echo 'VBOX_WITH_WARNINGS_AS_ERRORS :=' >> "${WORK}/LocalConfig.kmk"
    # https://forums.virtualbox.org/viewtopic.php?f=15&t=57828
    echo 'VBOX_WITH_TESTCASES :=' >> "${WORK}/LocalConfig.kmk"
    echo 'VBOX_WITH_TESTSUITE :=' >> "${WORK}/LocalConfig.kmk"

    # Set some default paths
    echo 'VBOX_WITH_ORIGIN :=' >> "${WORK}/LocalConfig.kmk"
    echo "VBOX_PATH_APP_PRIVATE_ARCH := /usr/$(exhost --target)/lib/VirtualBox" >> "${WORK}/LocalConfig.kmk"
    echo 'VBOX_PATH_SHARED_LIBS := $(VBOX_PATH_APP_PRIVATE_ARCH)' >> "${WORK}/LocalConfig.kmk"
    echo 'VBOX_WITH_RUNPATH := $(VBOX_PATH_APP_PRIVATE_ARCH)' >> "${WORK}/LocalConfig.kmk"
    echo "VBOX_PATH_APP_PRIVATE := /usr/share/${PN}" >> "${WORK}/LocalConfig.kmk"
    echo "VBOX_PATH_PACKAGE_DOCS := /usr/share/doc/${PNVR}" >> "${WORK}/LocalConfig.kmk"
    echo 'VBOX_PATH_APP_DOCS = $(VBOX_PATH_PACKAGE_DOCS)' >> "${WORK}/LocalConfig.kmk"

    # Set some toolchain programs
    echo "TOOL_GCC3_AR := ${AR}" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC32_AR := i686-pc-linux-gnu-ar" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX3_AR := ${AR}" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX32_AR := i686-pc-linux-gnu-ar" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC3_LD := ${CC}" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC3_LD_SYSMOD := ${LD}" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC32_LD := i686-pc-linux-gnu-gcc" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC32_LD_SYSMOD := i686-pc-linux-gnu-ld" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC3_OBJCOPY := $(exhost --target)-objcopy" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GCC32_OBJCOPY := i686-pc-linux-gnu-objcopy" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX3_LD := ${CXX}" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX3_LD_SYSMOD := ${LD}" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX32_LD := i686-pc-linux-gnu-g++" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX32_LD_SYSMOD := i686-pc-linux-gnu-ld" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX3_OBJCOPY := $(exhost --target)-objcopy" >> "${WORK}/LocalConfig.kmk"
    echo "TOOL_GXX32_OBJCOPY := i686-pc-linux-gnu-objcopy" >> "${WORK}/LocalConfig.kmk"

    if option python; then
        local python_abi=$(python_get_abi)
        ever at_least 3 ${python_abi} && ! ever at_least 3.8 ${python_abi} && python_abi+=m
        edo sed -e "s/SUPPYTHONLIBS=\"[a-z0-9. ]*/SUPPYTHONLIBS=\"python${python_abi}/" -i configure
        edo sed -e "s/versions = \[[a-z0-9. \",]*/versions = \[ \"${python_abi}\" /" -i src/libs/xpcom18a4/python/gen_python_deps.py
    fi
}

virtualbox-ose_src_configure() {
    local myconf="--with-gcc=${CC} --with-g++=${CXX}"
    if optionq X; then
        optionq opengl || myconf="${myconf} --disable-opengl"
        optionq truetype || myconf="${myconf} --disable-sdl-ttf"
        if optionq qt5; then
            myconf="${myconf} --enable-qt5"
        else
            myconf="${myconf} --disable-qt"
        fi
    else
        myconf="${myconf} --build-headless"
    fi
    optionq alsa || myconf="${myconf} --disable-alsa"
    optionq dbus || myconf="${myconf} --disable-dbus"
    optionq device-mapper || myconf="${myconf} --disable-devmapper"
    optionq pulseaudio || myconf="${myconf} --disable-pulse"
    optionq python || myconf="${myconf} --disable-python"
    optionq vnc && myconf="${myconf} --enable-vnc"
    optionq vpx || myconf="${myconf} --disable-libvpx"
    optionq webservice && myconf="${myconf} --enable-webservice"
    optionq wine && myconf="${myconf} --setup-wine"
    if ! has_32bit_glibc; then
        # This is needed to build on a non-multilib system
        myconf="${myconf} --disable-vmmraw"
    fi
    # Those could become options
    # doc: Needs pdflatex
    # java: Needs detection in configure script
    myconf="${myconf} --disable-docs --disable-java"
    esandbox allow_net unix:/tmp/.wine-*/server-*/socket
    # divert configure's wine checks away from the current user's home
    export WINEPREFIX="${TEMP}"
    export XDG_CACHE_HOME="${TEMP}/.cache/"
    unset DISPLAY
    # Call configure script directly as it is not a GNU one
    edo ./configure --disable-kmods ${myconf}
    esandbox disallow_net unix:/tmp/.wine-*/server-*/socket
}

virtualbox-ose_src_compile() {
    edo source env.sh
    edo kmk -j${EXJOBS:-1} all VBOX_NM="${NM} -p"
}

virtualbox-ose_src_test() {
    edo source env.sh
    edo kmk -j1 test
}

virtualbox-ose_src_install() {
    edo source env.sh

    local installdir="/usr/$(exhost --target)/lib/VirtualBox"

    edo cd "${WORK}/out/${BUILD_TARGET}.${BUILD_TARGET_ARCH}/release/bin"

    vbox_doins() {
        local file="${1}"
        local perms="${2:-0750}"
        local destpath="${3:-${installdir}}"

        insinto ${destpath}
        insopts -m ${perms} -g vboxusers
        doins ${file}
    }

    insinto /etc/vbox
    hereins vbox.cfg <<EOF
# VirtualBox installation directory
INSTALL_DIR='${installdir}'
# VirtualBox version
INSTALL_VER='${PV}'
EOF

    # Move kernel modules files
    insinto /usr/src/${PNV}
    doins -r src/*

    dodir "${installdir}" /usr/$(exhost --target)/bin
    insinto "${installdir}"
    doins -r components

    for bin in *.r0 *.so iPxeBaseBin VBox{,CreateUSBNode,SysInfo}.sh \
               VBox{Autostart,BalloonCtrl,BugReport,CpuReport,ExtPackHelperApp,Manage,SVC,VMMPreload,XPCOMIPCD};
    do
        vbox_doins ${bin}
    done

    for suid in VBox{Headless,Net{AdpCtl,DHCP,NAT}}; do
        vbox_doins ${suid} 4750
    done

    for efi in VBoxEFI*.fd; do
        vbox_doins ${efi} 0644
    done

    for link in VBox{Autostart,BalloonCtrl,BugReport,Headless,Manage,VRDP}; do
        dosym "${installdir}"/VBox.sh /usr/$(exhost --target)/bin/${link}
    done

    vbox_doins VBoxTunctl
    dosym "${installdir}"/VBoxTunctl /usr/$(exhost --target)/bin/VBoxTunctl
    dosym VBoxAuth.so "${installdir}"/VRDPAuth.so

    if option X; then
        vbox_doins rdesktop-vrdp
        vbox_doins VBoxSDL 4750
        dosym "${installdir}"/VBox.sh /usr/$(exhost --target)/bin/VBoxSDL

        insinto /usr/share/applications
        doins virtualbox.desktop

        insinto /usr/share/pixmaps
        doins VBox.png

        insinto /usr/share/"${PN}"
        doins -r {nls,UnattendedTemplates}

        if option qt5; then
            vbox_doins VirtualBox
            dosym "${installdir}"/VBox.sh /usr/$(exhost --target)/bin/VirtualBox
            vbox_doins VirtualBoxVM 4750
        fi

        if option opengl; then
            vbox_doins VBoxTestOGL
            dosym "${installdir}"/VBoxTestOGL /usr/$(exhost --target)/bin/VBoxTestOGL
        fi
    fi

    if option device-mapper; then
        vbox_doins VBoxVolInfo 4750
        dosym "${installdir}"/VBoxVolInfo /usr/$(exhost --target)/bin/VBoxVolInfo
    fi

    if option webservice; then
        vbox_doins vboxwebsrv
        dosym "${installdir}"/VBox.sh /usr/$(exhost --target)/bin/vboxwebsrv
        install_systemd_files
    fi

    insinto "${UDEVRULESDIR}"
    hereins 60-vboxdrv.rules <<EOF
KERNEL=="vboxdrv", NAME="vboxdrv", OWNER="root", GROUP="vboxusers", MODE="0660"
KERNEL=="vboxdrvu", NAME="vboxdrvu", OWNER="root", GROUP="vboxusers", MODE="0666"
KERNEL=="vboxnetctl", NAME="vboxnetctl", OWNER="root", GROUP="vboxusers", MODE="0660"
SUBSYSTEM=="usb_device", ACTION=="add", RUN+="${installdir}/VBoxCreateUSBNode.sh \$major \$minor \$attr{bDeviceClass} usb"
SUBSYSTEM=="usb", ACTION=="add", ENV{DEVTYPE}=="usb_device", RUN+="${installdir}/VBoxCreateUSBNode.sh \$major \$minor \$attr{bDeviceClass} usb"
SUBSYSTEM=="usb_device", ACTION=="remove", RUN+="${installdir}/VBoxCreateUSBNode.sh --remove \$major \$minor"
SUBSYSTEM=="usb", ACTION=="remove", ENV{DEVTYPE}=="usb_device", RUN+="${installdir}/VBoxCreateUSBNode.sh --remove \$major \$minor"
EOF

    # Install guest additions if required
    if optionq additions; then
        insinto /usr/share/${PN}
        newins "${FETCHEDDIR}"/VBoxGuestAdditions_${REAL_PV}.iso VBoxGuestAdditions.iso
    fi

    if optionq extensions; then
        edo pushd "${WORK}"/${EXT_PN}
        insinto "${installdir}"/ExtensionPacks/${EXT_PN}
        doins ExtPack* PXE-Intel.rom
        doins -r ${BUILD_TARGET}.${BUILD_TARGET_ARCH}
        edo popd
    fi
}

virtualbox-ose_pkg_postinst() {
    ewarn "This exheres does not build the kernel modules for VirtualBox, you will have to do this"
    ewarn "on your own. The source code has been installed to /usr/src/${PNV}"

    for rule in {10-vboxdrv.rules,60-virtualbox.rules};
    do
        if [[ -f /etc/udev/rules.d/"${rule}" ]]; then
            ewarn "Old rules file /etc/udev/rules.d/${rule} found."
            ewarn "You should remove this file."
        fi
    done

    elog "In order to expose USB devices to VirtualBox guests, your user must be a member of"
    elog "the 'usb' group."
}

